
sdk_2026.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fde  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093e  00000000  00000000  00001f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a4  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  9e:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:
#include "leds.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(ANALOG_COMP_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	led_on_off_fast();
  c8:	0e 94 9b 00 	call	0x136	; 0x136 <led_on_off_fast>
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_1>:
 */
#include <avr/interrupt.h>
#include "leds.h"

ISR(INT0_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
		led_on_off_fast();
 110:	0e 94 9b 00 	call	0x136	; 0x136 <led_on_off_fast>
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <led_on_off_fast>:
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	0f c0       	rjmp	.+30     	; 0x15a <led_on_off_fast+0x24>
	{
		PORTB ^= 1 << PB5;
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	89 27       	eor	r24, r25
 142:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	4f ef       	ldi	r20, 0xFF	; 255
 146:	81 ee       	ldi	r24, 0xE1	; 225
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <led_on_off_fast+0x14>
 152:	00 c0       	rjmp	.+0      	; 0x154 <led_on_off_fast+0x1e>
 154:	00 00       	nop
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	24 31       	cpi	r18, 0x14	; 20
 15c:	31 05       	cpc	r19, r1
 15e:	74 f3       	brlt	.-36     	; 0x13c <led_on_off_fast+0x6>
	{
		PORTB ^= 1 << PB5;
		_delay_ms(100);	
	}
	
 160:	08 95       	ret

00000162 <main>:
    //{
	 ////led_on_off();
    //}
	
	
	init_ports();           // Inicializa los puertos
 162:	0e 94 41 01 	call	0x282	; 0x282 <init_ports>
	timer1_servos_init();   // Configura Timer1 para PWM en OC1A y OC1B
 166:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer1_servos_init>
	
	//0° al inicio
	servo1_set_pos(SERVO_POS_0);
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	0e 94 8e 01 	call	0x31c	; 0x31c <servo1_set_pos>
	servo2_set_pos(SERVO_POS_0);
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	0e 94 93 01 	call	0x326	; 0x326 <servo2_set_pos>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	83 ed       	ldi	r24, 0xD3	; 211
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x28>
 18a:	00 00       	nop
	
	while (1){
		
		//Secuencia 1: Servo 1 (0 - 90 - 180) 
		
		servo1_set_pos(SERVO_POS_90);
 18c:	8c ed       	ldi	r24, 0xDC	; 220
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	0e 94 8e 01 	call	0x31c	; 0x31c <servo1_set_pos>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	83 ed       	ldi	r24, 0xD3	; 211
 198:	90 e3       	ldi	r25, 0x30	; 48
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x38>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x42>
 1a4:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);
		servo1_set_pos(SERVO_POS_180);
 1a6:	80 ed       	ldi	r24, 0xD0	; 208
 1a8:	97 e0       	ldi	r25, 0x07	; 7
 1aa:	0e 94 8e 01 	call	0x31c	; 0x31c <servo1_set_pos>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	83 ed       	ldi	r24, 0xD3	; 211
 1b2:	90 e3       	ldi	r25, 0x30	; 48
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x52>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x5c>
 1be:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);

		//Secuencia 2: Servo 2 (0 -> 90 -> 180) 
		
		servo2_set_pos(SERVO_POS_90);
 1c0:	8c ed       	ldi	r24, 0xDC	; 220
 1c2:	95 e0       	ldi	r25, 0x05	; 5
 1c4:	0e 94 93 01 	call	0x326	; 0x326 <servo2_set_pos>
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	83 ed       	ldi	r24, 0xD3	; 211
 1cc:	90 e3       	ldi	r25, 0x30	; 48
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x6c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x76>
 1d8:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);
		servo2_set_pos(SERVO_POS_180);
 1da:	80 ed       	ldi	r24, 0xD0	; 208
 1dc:	97 e0       	ldi	r25, 0x07	; 7
 1de:	0e 94 93 01 	call	0x326	; 0x326 <servo2_set_pos>
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	83 ed       	ldi	r24, 0xD3	; 211
 1e6:	90 e3       	ldi	r25, 0x30	; 48
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x86>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x90>
 1f2:	00 00       	nop
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	83 ed       	ldi	r24, 0xD3	; 211
 1f8:	90 e3       	ldi	r25, 0x30	; 48
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x98>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0xa2>
 204:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);

		_delay_ms(SERVO_MOVE_DELAY); // Pausa 

		//Secuencia 3: Servo 1 (180 -> 90 -> 0) 
		servo1_set_pos(SERVO_POS_90);
 206:	8c ed       	ldi	r24, 0xDC	; 220
 208:	95 e0       	ldi	r25, 0x05	; 5
 20a:	0e 94 8e 01 	call	0x31c	; 0x31c <servo1_set_pos>
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	83 ed       	ldi	r24, 0xD3	; 211
 212:	90 e3       	ldi	r25, 0x30	; 48
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xb2>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xbc>
 21e:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);
		servo1_set_pos(SERVO_POS_0);
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	0e 94 8e 01 	call	0x31c	; 0x31c <servo1_set_pos>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	83 ed       	ldi	r24, 0xD3	; 211
 22c:	90 e3       	ldi	r25, 0x30	; 48
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0xcc>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0xd6>
 238:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);

		//Secuencia 4: Servo 2 (180 -> 90 -> 0) 
		servo2_set_pos(SERVO_POS_90);
 23a:	8c ed       	ldi	r24, 0xDC	; 220
 23c:	95 e0       	ldi	r25, 0x05	; 5
 23e:	0e 94 93 01 	call	0x326	; 0x326 <servo2_set_pos>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	83 ed       	ldi	r24, 0xD3	; 211
 246:	90 e3       	ldi	r25, 0x30	; 48
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0xe6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xf0>
 252:	00 00       	nop
		_delay_ms(SERVO_MOVE_DELAY);
		servo2_set_pos(SERVO_POS_0);
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	93 e0       	ldi	r25, 0x03	; 3
 258:	0e 94 93 01 	call	0x326	; 0x326 <servo2_set_pos>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	83 ed       	ldi	r24, 0xD3	; 211
 260:	90 e3       	ldi	r25, 0x30	; 48
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x100>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x10a>
 26c:	00 00       	nop
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	83 ed       	ldi	r24, 0xD3	; 211
 272:	90 e3       	ldi	r25, 0x30	; 48
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x112>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x11c>
 27e:	00 00       	nop
 280:	85 cf       	rjmp	.-246    	; 0x18c <main+0x2a>

00000282 <init_ports>:
	//PORTD |= (1 << PD2);//activa Rp
	//uso temporal del puerto B para LCD
	//DDRB = 0xff; //PB4 a PB7 para datos
	
	//configura PB1 como salida para OC1A 
	DDRB |= (1 << PB1);
 282:	84 b1       	in	r24, 0x04	; 4
 284:	82 60       	ori	r24, 0x02	; 2
 286:	84 b9       	out	0x04, r24	; 4
	//configura PB2 como salida para OC1B 
	DDRB |= (1 << PB2);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	84 60       	ori	r24, 0x04	; 4
 28c:	84 b9       	out	0x04, r24	; 4
 28e:	08 95       	ret

00000290 <__vector_16>:
	//if prescaling fclk/32
	//fout=16,000,000/(32x510)=980.39 Hz ~T= 1 ms
	TCCR2B |= (1 << CS21)|(1 << CS20);
	//example: duty cycle= 20%
	//OCR value=(duty cycle in %)x256=(0.2x256)=51.2 ~ (51)
	OCR2A = 51;
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ac:	8d 37       	cpi	r24, 0x7D	; 125
 2ae:	30 f0       	brcs	.+12     	; 0x2bc <__vector_16+0x2c>
 2b0:	95 b1       	in	r25, 0x05	; 5
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	89 27       	eor	r24, r25
 2b6:	85 b9       	out	0x05, r24	; 5
 2b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_11>:
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	95 b1       	in	r25, 0x05	; 5
 2da:	80 e2       	ldi	r24, 0x20	; 32
 2dc:	89 27       	eor	r24, r25
 2de:	85 b9       	out	0x05, r24	; 5
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <timer1_servos_init>:
	*/
}
void timer1_servos_init(void){
	
	// Modo no-invertido  
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 2ee:	82 ea       	ldi	r24, 0xA2	; 162
 2f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	// Modo 14  y prescaler = 8 
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 2f4:	8a e1       	ldi	r24, 0x1A	; 26
 2f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	
	ICR1 = 39999;
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	9c e9       	ldi	r25, 0x9C	; 156
 2fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 302:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	
	OCR1A = 2000; // Canal 1 (Servo 1)
 306:	80 ed       	ldi	r24, 0xD0	; 208
 308:	97 e0       	ldi	r25, 0x07	; 7
 30a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 30e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 2000; // Canal 2 (Servo 2)
 312:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 316:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 31a:	08 95       	ret

0000031c <servo1_set_pos>:
}


void servo1_set_pos(uint16_t counts){
	OCR1A = counts;
 31c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 320:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 324:	08 95       	ret

00000326 <servo2_set_pos>:
}

void servo2_set_pos(uint16_t counts){
	OCR1B = counts;
 326:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 32a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
